{"version":3,"sources":["res/Avandria.png","theme.ts","ts/monsters/monster-table.tsx","ts/pages.ts","ts/header.tsx","ts/monsters/monster-card.tsx","ts/shared/page-iterator.tsx","ts/monsters/monster-view.tsx","ts/constants.ts","ts/encounters/useGenerateEncounter.ts","ts/encounters/select-monster.tsx","ts/encounters/useTrackEncounter.ts","ts/encounters/encounter-tracker.tsx","ts/encounters/encounter-generator.tsx","ts/shared/custom-styles.tsx","ts/shared/render-json-recursive.tsx","ts/mechanics/mechanics.tsx","ts/spells/spell-table.tsx","ts/spells/spell-card.tsx","ts/spells/spell-view.tsx","ts/shop/shop.tsx","ts/campaigns/avandria-map.tsx","ts/app-router.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","theme","createTheme","palette","mode","typography","fontSize","columnDescriptor","field","headerName","flex","sortable","filterable","MonsterTable","_ref","onRowClick","props","navigate","useNavigate","searchQuery","setSearchQuery","React","Container","TextField","variant","fullWidth","value","onChange","event","target","label","size","Paper","sx","margin","DataGrid","Object","assign","rows","monsters","filter","monster","split","some","query","name","toLowerCase","includes","columns","params","concat","row","initialState","pagination","paginationModel","pageSize","pageSizeOptions","getRowId","pages","path","Header","createElement","style","justifyContent","AppBar","position","marginBottom","maxWidth","Toolbar","disableGutters","alignItems","Typography","Stack","direction","divider","Divider","orientation","flexItem","marginLeft","spacing","map","page","MenuItem","onClick","py","px","key","color","Outlet","MonsterCard","statsA","STR","STR_mod","DEX","DEX_mod","CON","CON_mod","statsB","INT","INT_mod","WIS","WIS_mod","CHA","CHA_mod","Card","CardContent","meta","Challenge","marginTop","CardMedia","component","src","img_url","width","aspectRatio","objectFit","backgroundColor","height","HP","AC","stats","_ref2","Speed","Senses","Languages","Saving_Throws","Skills","Actions","dangerouslySetInnerHTML","__html","Legendary_Actions","Traits","PageIterator","maxLength","pageSetter","iteratePage","pageSkip","newPage","IconButton","disabled","ArrowCircleLeftOutlined","ArrowCircleRightOutlined","MonsterView","useParams","monsterIndex","findIndex","selectedMonster","undefined","alignContent","length","MONSTER_TYPES","ALIGNMENTS","SIZES","DIFFICULTIES","EXPERIENCE_THRESHOLDS","ENCOUNTER_MULTIPLIERS","numberOfMonsters","multiplier","MIN_EXPERIENCE","MAX_EXPERIENCE","getMonsterXP","Number","replace","useGenerateEncounter","useState","monsterTypes","setMonsterTypes","alignments","setAlignments","sizes","setSizes","playerLevel","setPlayerLevel","partySize","setPartySize","difficulty","setDifficulty","experience","setExperience","monstersInCombat","setMonstersInCombat","filterMonsters","monsterExperience","filterMonsterByExperience","type","filterMonsterByType","alignment","filterMonsterByAlignment","filterMonsterBySize","filterByKeywordSearch","determineMonstersInEncounter","maxExperienceThreshold","diff","potentialMonsters","experienceThreshold","_ENCOUNTER_MULTIPLIER","_ENCOUNTER_MULTIPLIER2","Math","floor","random","push","find","encounterMultiplier","usedXPBudget","reduce","accumulator","SelectMonster","onSelectMonster","open","setOpen","onSelect","useCallback","Fragment","Add","Dialog","onClose","DialogTitle","DialogContent","Button","createRemainingMonster","modifier","parseInt","initiative","uuid","crypto","randomUUID","maxHP","hp","ac","getMonstersFromEncounter","sort","a","b","useTrackEncounter","remainingMonsters","setRemainingMonsters","setSelectedMonster","pageNumber","setPageNumber","useEffect","monstersInEncounter","onUpdateHealth","newRemainingMonsters","index","newHealth","parseFloat","isNaN","onDeleteMonster","filteredRemainingMonsters","remainingMonster","onAddMonster","identifiedMonster","EncounterTracker","pageOffset","Box","m","display","mt","slice","hiddenLabel","bind","placeholder","InputProps","startAdornment","InputAdornment","mr","Favorite","endAdornment","marginRight","Shield","Delete","EncounterGenerator","flexWrap","useFlexGap","Autocomplete","multiple","options","_event","newValue","flexGrow","renderInput","getOptionLabel","option","Slider","_e","valueLabelDisplay","min","max","CustomAccordion","styled","Accordion","elevation","square","boxShadow","border",".MuiAccordionDetails-root",".MuiAccordionSummary-root","RenderJsonRecursive","instance","depth","Array","isArray","subInstance","entries","_ref3","title","tableObject","objectEntries","values","_value","valueObject","id","forEach","array","keys","hideFooter","renderTable","mb","defaultExpanded","AccordionSummary","expandIcon","ArrowDropDown","aria-controls","AccordionDetails","Mechanics","mechanics","valueGetter","components","raw","classes","join","spells","spell","SpellCard","casting_time","duration","range","description","SpellView","spellIndex","selectedSpell","armourColumnDescriptor","weaponColumnDescriptor","gearColumnDescriptor","sections","armours","weapons","gears","armament","AvandriaMap","MapOfAvandria","alt","AppRouter","router","createHashRouter","element","children","EncounterGenerate","SpellTable","Shop","RouterProvider","rootElement","document","getElementById","ReactDOM","createRoot","render","ThemeProvider","StrictMode","CssBaseline"],"mappings":"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","file":"static/js/main.2c00b5a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Avandria.10b752da.png\";","/**\r\n * Provides the theme for the particular website\r\n * @author Lachlan Charteris\r\n */\r\n\r\nimport { createTheme } from '@mui/material/styles';\r\n\r\n// A custom theme for this app\r\nconst theme = createTheme({\r\n  palette: { mode: 'dark' },\r\n  typography: {\r\n    fontSize: 12,\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import * as React from 'react';\r\nimport { Container, Paper, TextField } from '@mui/material';\r\nimport monsters from '../../res/srd_5e_monsters.json';\r\nimport { DataGrid, GridRowParams } from '@mui/x-data-grid';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst columnDescriptor = [\r\n  {\r\n    field: 'name',\r\n    headerName: 'Name',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'AC',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'HP',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'Speed',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'STR',\r\n    flex: 0.25,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'DEX',\r\n    flex: 0.25,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'CON',\r\n    flex: 0.25,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'INT',\r\n    flex: 0.25,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'WIS',\r\n    flex: 0.25,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'CHA',\r\n    flex: 0.25,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'Senses',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'Challenge',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n];\r\n\r\nconst MonsterTable: React.FC<{\r\n  onRowClick?: (params: GridRowParams) => void;\r\n  props?: object;\r\n}> = ({ onRowClick, props = {} }) => {\r\n  const navigate = useNavigate();\r\n  const [searchQuery, setSearchQuery] = React.useState<string>('');\r\n  const onViewMonster = (params: GridRowParams) =>\r\n    navigate(`/monsters/${params.row.name}`);\r\n\r\n  return (\r\n    <Container>\r\n      <TextField\r\n        variant=\"filled\"\r\n        fullWidth\r\n        value={searchQuery}\r\n        onChange={(event) => setSearchQuery(event.target.value)}\r\n        label=\"Search Monsters\"\r\n        size=\"small\"\r\n      />\r\n      <Paper sx={{ margin: 1 }}>\r\n        <DataGrid\r\n          rows={monsters.filter((monster) =>\r\n            searchQuery\r\n              .split('+')\r\n              .some((query) =>\r\n                monster.name.toLowerCase().includes(query.toLowerCase())\r\n              )\r\n          )}\r\n          columns={columnDescriptor}\r\n          onRowClick={onRowClick ?? onViewMonster}\r\n          initialState={{\r\n            pagination: {\r\n              paginationModel: { pageSize: 25 },\r\n            },\r\n          }}\r\n          pageSizeOptions={[10, 25, 50]}\r\n          getRowId={(row) => row.name}\r\n          {...props}\r\n        />\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MonsterTable;\r\n","/**\r\n * Defines the default pages\r\n * @author Lachlan Charteris\r\n */\r\n\r\nexport type Page = {\r\n  label: string;\r\n  name: string;\r\n  path: string;\r\n};\r\n\r\nconst pages: Page[] = [\r\n  { label: 'mechanics', name: 'Mechanics', path: '/' },\r\n  { label: 'monsters', name: 'Monsters', path: '/monsters' },\r\n  { label: 'encounter', name: 'Encounters', path: '/encounter' },\r\n  { label: 'spells', name: 'Spells', path: '/spells' },\r\n  { label: 'shop', name: 'Gear', path: '/gear' },\r\n  { label: 'campaign', name: 'Campaign', path: '/campaign' },\r\n];\r\n\r\nexport { pages };\r\n","/**\r\n * Main application for executing the website\r\n * @author Lachlan Charteris\r\n */\r\n\r\nimport React from 'react';\r\nimport {\r\n  Typography,\r\n  Container,\r\n  Toolbar,\r\n  AppBar,\r\n  Stack,\r\n  Divider,\r\n  MenuItem,\r\n} from '@mui/material';\r\nimport { Outlet, useNavigate } from 'react-router-dom';\r\nimport { pages } from './pages';\r\n\r\nconst Header = () => {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <div style={{ justifyContent: 'center' }}>\r\n      <AppBar position=\"sticky\" sx={{ marginBottom: '2%' }}>\r\n        <Container maxWidth=\"xl\">\r\n          <Toolbar disableGutters sx={{ alignItems: 'center' }}>\r\n            <Typography variant=\"h4\">DnD Assistant</Typography>\r\n            <Stack\r\n              direction=\"row\"\r\n              divider={<Divider orientation=\"vertical\" flexItem />}\r\n              marginLeft={5}\r\n              spacing={1}\r\n            >\r\n              {pages.map((page) => (\r\n                <MenuItem\r\n                  onClick={() => navigate(page.path)}\r\n                  sx={{ py: '6px', px: '12px' }}\r\n                  key={page.label}\r\n                >\r\n                  <Typography variant=\"body2\" color=\"info\">\r\n                    {page.name}\r\n                  </Typography>\r\n                </MenuItem>\r\n              ))}\r\n            </Stack>\r\n          </Toolbar>\r\n        </Container>\r\n      </AppBar>\r\n      <Outlet />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { FC } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardMedia,\r\n  Container,\r\n  Divider,\r\n  Stack,\r\n  Typography,\r\n} from '@mui/material';\r\nimport { Monster } from '../types/Monster';\r\n\r\nconst MonsterCard: FC<{ monster: Monster }> = ({ monster }) => {\r\n  const statsA = [\r\n    { key: 'STR', value: `${monster.STR} ${monster.STR_mod}` },\r\n    { key: 'DEX', value: `${monster.DEX} ${monster.DEX_mod}` },\r\n    { key: 'CON', value: `${monster.CON} ${monster.CON_mod}` },\r\n  ];\r\n\r\n  const statsB = [\r\n    { key: 'INT', value: `${monster.INT} ${monster.INT_mod}` },\r\n    { key: 'WIS', value: `${monster.WIS} ${monster.WIS_mod}` },\r\n    { key: 'CHA', value: `${monster.CHA} ${monster.CHA_mod}` },\r\n  ];\r\n\r\n  return (\r\n    <Card sx={{ margin: 2 }}>\r\n      <CardContent>\r\n        <Stack direction=\"column\">\r\n          <Typography variant=\"h4\">{monster.name}</Typography>\r\n          <Stack direction=\"row\" justifyContent=\"space-between\">\r\n            <Typography variant=\"subtitle1\">{monster.meta}</Typography>\r\n            <Typography variant=\"subtitle1\">{monster.Challenge}</Typography>\r\n          </Stack>\r\n          <Divider\r\n            orientation=\"horizontal\"\r\n            sx={{ marginTop: 1, marginBottom: 2 }}\r\n          />\r\n          <Container sx={{ marginBottom: 2 }}>\r\n            <Stack\r\n              direction=\"row\"\r\n              justifyContent=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <CardMedia\r\n                component=\"img\"\r\n                src={monster.img_url}\r\n                sx={{\r\n                  width: '50%',\r\n                  aspectRatio: '1/1',\r\n                  objectFit: 'contain',\r\n                  backgroundColor: 'secondary',\r\n                }}\r\n              />\r\n              <Stack\r\n                direction=\"column\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                width=\"45%\"\r\n                height=\"100%\"\r\n              >\r\n                <Typography variant=\"subtitle1\">{`HP: ${monster.HP}`}</Typography>\r\n                <Typography\r\n                  variant=\"subtitle1\"\r\n                  marginBottom={2}\r\n                >{`AC: ${monster.AC}`}</Typography>\r\n                {[statsA, statsB].map((stats) => (\r\n                  <Stack\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    justifyContent=\"space-between\"\r\n                    alignItems=\"center\"\r\n                  >\r\n                    {stats.map(({ key, value }) => (\r\n                      <Stack direction=\"column\" alignItems=\"center\">\r\n                        <Typography variant=\"h6\">{key}</Typography>\r\n                        <Typography variant=\"subtitle1\">{value}</Typography>\r\n                      </Stack>\r\n                    ))}\r\n                  </Stack>\r\n                ))}\r\n                <Typography variant=\"subtitle1\" marginTop={2}>\r\n                  {monster.Speed}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\">{monster.Senses}</Typography>\r\n                <Typography variant=\"subtitle1\">{monster.Languages}</Typography>\r\n                <Typography variant=\"subtitle1\">\r\n                  {monster.Saving_Throws}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\">{monster.Skills}</Typography>\r\n              </Stack>\r\n            </Stack>\r\n          </Container>\r\n          {monster.Actions && (\r\n            <Container>\r\n              <Divider orientation=\"horizontal\" sx={{ margin: 1 }} />\r\n              <Typography variant=\"h5\">Actions</Typography>\r\n              <td dangerouslySetInnerHTML={{ __html: monster.Actions }} />\r\n            </Container>\r\n          )}\r\n          {monster.Legendary_Actions && (\r\n            <Container>\r\n              <Divider orientation=\"horizontal\" sx={{ margin: 1 }} />\r\n              <Typography variant=\"h5\">Legendary Actions</Typography>\r\n              <td\r\n                dangerouslySetInnerHTML={{\r\n                  __html: monster.Legendary_Actions,\r\n                }}\r\n              />\r\n            </Container>\r\n          )}\r\n          {monster.Traits && (\r\n            <Container>\r\n              <Divider orientation=\"horizontal\" sx={{ margin: 1 }} />\r\n              <Typography variant=\"h5\">Traits</Typography>\r\n              <td dangerouslySetInnerHTML={{ __html: monster.Traits }} />\r\n            </Container>\r\n          )}\r\n        </Stack>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MonsterCard;\r\n","import React, { FC } from 'react';\r\nimport {\r\n  ArrowCircleLeftOutlined,\r\n  ArrowCircleRightOutlined,\r\n} from '@mui/icons-material';\r\nimport { IconButton, Stack, Typography } from '@mui/material';\r\n\r\nconst PageIterator: FC<{\r\n  page: number;\r\n  maxLength: number;\r\n  pageSetter: (newPage: number) => void;\r\n}> = ({ page, maxLength, pageSetter }) => {\r\n  const iteratePage = (pageSkip: number) => {\r\n    let newPage = page + pageSkip;\r\n    if (newPage < 0) newPage = maxLength - 1;\r\n    if (newPage >= maxLength) newPage = 0;\r\n    pageSetter(newPage);\r\n  };\r\n\r\n  return (\r\n    <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n      <IconButton disabled={maxLength <= 1} onClick={() => iteratePage(-1)}>\r\n        <ArrowCircleLeftOutlined />\r\n      </IconButton>\r\n      <Typography>{`Page ${page + 1}`}</Typography>\r\n      <IconButton disabled={maxLength <= 1} onClick={() => iteratePage(1)}>\r\n        <ArrowCircleRightOutlined />\r\n      </IconButton>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default PageIterator;\r\n","import React from 'react';\r\nimport { Container, Typography } from '@mui/material';\r\nimport monsters from '../../res/srd_5e_monsters.json';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport MonsterCard from './monster-card';\r\nimport PageIterator from '../shared/page-iterator';\r\n\r\nexport default function MonsterView() {\r\n  const navigate = useNavigate();\r\n  const { name } = useParams();\r\n  const monsterIndex = monsters.findIndex((monster) => monster.name === name);\r\n  const selectedMonster = monsters[monsterIndex];\r\n\r\n  return selectedMonster === undefined ? (\r\n    <Typography variant=\"h5\">\r\n      {`Cannot find monster with name \"${name}\"`}\r\n    </Typography>\r\n  ) : (\r\n    <Container sx={{ justifyContent: 'center', alignContent: 'center' }}>\r\n      <PageIterator\r\n        page={monsterIndex}\r\n        maxLength={monsters.length}\r\n        pageSetter={(newPage: number) =>\r\n          navigate(`/monsters/${monsters[newPage].name}`)\r\n        }\r\n      />\r\n      <MonsterCard monster={selectedMonster} />\r\n    </Container>\r\n  );\r\n}\r\n","export const MONSTER_TYPES = [\r\n  'Aberration',\r\n  'Beast',\r\n  'Celestial',\r\n  'Construct',\r\n  'Dragon',\r\n  'Element',\r\n  'Fey',\r\n  'Fiend',\r\n  'Giant',\r\n  'Humanoid',\r\n  'Monstrosity',\r\n  'Ooze',\r\n  'Plant',\r\n  'Undead',\r\n];\r\nexport const ALIGNMENTS = [\r\n  'Lawful',\r\n  'Neutral',\r\n  'Chaotic',\r\n  'Good',\r\n  'Evil',\r\n  'Unaligned',\r\n  'Any',\r\n];\r\nexport const SIZES = ['Tiny', 'Small', 'Medium', 'Large', 'Huge', 'Gargantuan'];\r\nexport const DIFFICULTIES = ['Easy', 'Medium', 'Hard', 'Deadly'];\r\nexport const EXPERIENCE_THRESHOLDS = [\r\n  [25, 50, 75, 100], // 1st level\r\n  [50, 100, 150, 200], // 2nd level\r\n  [75, 150, 225, 400], // 3rd level\r\n  [125, 250, 375, 500], // 4th level\r\n  [250, 500, 750, 1100], // 5th level\r\n  [300, 600, 900, 1400], // 6th level\r\n  [350, 750, 1100, 1700], // 7th level\r\n  [450, 900, 1400, 2100], // 8th level\r\n  [550, 1100, 1600, 2400], // 9th level\r\n  [600, 1200, 1900, 2800], // 10th level\r\n  [800, 1600, 2400, 3600], // 11th level\r\n  [1000, 2000, 3000, 4500], // 12th level\r\n  [1100, 2200, 3400, 5100], // 13th level\r\n  [1250, 2500, 3800, 5700], // 14th level\r\n  [1400, 2800, 4300, 6400], // 15th level\r\n  [1600, 3200, 4800, 7200], // 16th level\r\n  [2000, 3900, 5900, 8800], // 17th level\r\n  [2100, 4200, 6300, 9500], // 18th level\r\n  [2400, 4900, 7300, 10900], // 19th level\r\n  [2800, 5700, 8500, 12700], // 20th level\r\n];\r\nexport const ENCOUNTER_MULTIPLIERS = [\r\n  { numberOfMonsters: 1, multiplier: 1 },\r\n  { numberOfMonsters: 2, multiplier: 1.5 },\r\n  { numberOfMonsters: 3, multiplier: 2 },\r\n  { numberOfMonsters: 7, multiplier: 2.5 },\r\n  { numberOfMonsters: 11, multiplier: 3 },\r\n  { numberOfMonsters: 15, multiplier: 4 },\r\n];\r\nexport const MIN_EXPERIENCE = 10;\r\nexport const MAX_EXPERIENCE = 12700;\r\n","import React, { useCallback } from 'react';\r\nimport monsters from '../../res/srd_5e_monsters.json';\r\nimport {\r\n  DIFFICULTIES,\r\n  ENCOUNTER_MULTIPLIERS,\r\n  EXPERIENCE_THRESHOLDS,\r\n  MAX_EXPERIENCE,\r\n  MIN_EXPERIENCE,\r\n} from '../constants';\r\nimport { Monster } from '../types/Monster';\r\n\r\nconst getMonsterXP = (monster: Monster) => {\r\n  return Number(monster.Challenge.split('(')[1].replace(/[^0-9.]/g, ''));\r\n};\r\n\r\nexport default function useGenerateEncounter() {\r\n  const [searchQuery, setSearchQuery] = React.useState<string>('');\r\n  const [monsterTypes, setMonsterTypes] = React.useState<string[]>([]);\r\n  const [alignments, setAlignments] = React.useState<string[]>([]);\r\n  const [sizes, setSizes] = React.useState<string[]>([]);\r\n  const [playerLevel, setPlayerLevel] = React.useState<number>(1);\r\n  const [partySize, setPartySize] = React.useState<number>(1);\r\n  const [difficulty, setDifficulty] = React.useState<string>('Easy');\r\n  const [experience, setExperience] = React.useState<number[]>([\r\n    MIN_EXPERIENCE,\r\n    MAX_EXPERIENCE,\r\n  ]);\r\n  const [monstersInCombat, setMonstersInCombat] = React.useState<Monster[]>([]);\r\n\r\n  const filterMonsterByType = (monster: Monster) => {\r\n    return (\r\n      monsterTypes.length === 0 ||\r\n      monsterTypes.some((type) => monster.meta.includes(type.toLowerCase()))\r\n    );\r\n  };\r\n  const filterMonsterByAlignment = (monster: Monster) => {\r\n    return (\r\n      alignments.length === 0 ||\r\n      alignments.some((alignment) =>\r\n        monster.meta.includes(alignment.toLowerCase())\r\n      )\r\n    );\r\n  };\r\n  const filterMonsterBySize = (monster: Monster) => {\r\n    return (\r\n      sizes.length === 0 || sizes.some((size) => monster.meta.includes(size))\r\n    );\r\n  };\r\n  const filterByKeywordSearch = (monster: Monster) => {\r\n    return searchQuery\r\n      .split('+')\r\n      .some((query) =>\r\n        monster.name.toLowerCase().includes(query.toLowerCase())\r\n      );\r\n  };\r\n  const filterMonsterByExperience = (monster: Monster) => {\r\n    const monsterExperience = getMonsterXP(monster);\r\n    return (\r\n      experience[0] <= monsterExperience && monsterExperience <= experience[1]\r\n    );\r\n  };\r\n  const filterMonsters = () =>\r\n    monsters.filter(\r\n      (monster) =>\r\n        filterMonsterByExperience(monster) &&\r\n        filterMonsterByType(monster) &&\r\n        filterMonsterByAlignment(monster) &&\r\n        filterMonsterBySize(monster) &&\r\n        filterByKeywordSearch(monster)\r\n    );\r\n\r\n  const determineMonstersInEncounter = () => {\r\n    const maxExperienceThreshold =\r\n      EXPERIENCE_THRESHOLDS[playerLevel - 1][\r\n        DIFFICULTIES.findIndex((diff) => diff === difficulty)\r\n      ] * partySize;\r\n    let potentialMonsters = filterMonsters().filter(\r\n      (monster) => getMonsterXP(monster) <= maxExperienceThreshold\r\n    );\r\n    let experienceThreshold = maxExperienceThreshold;\r\n    let multiplier = 1;\r\n\r\n    // Determine potential combatants\r\n    const monstersInCombat: Monster[] = [];\r\n    while (experienceThreshold > 0 && potentialMonsters.length > 0) {\r\n      const monsterIndex = Math.floor(Math.random() * potentialMonsters.length);\r\n      const monster = potentialMonsters[monsterIndex];\r\n      monstersInCombat.push(monster);\r\n\r\n      // Adjust experience threshold accounting for monster groups\r\n      multiplier =\r\n        ENCOUNTER_MULTIPLIERS.find(\r\n          (encounterMultiplier) =>\r\n            monstersInCombat.length + 1 <=\r\n              encounterMultiplier.numberOfMonsters ||\r\n            encounterMultiplier.numberOfMonsters === 15\r\n        )?.multiplier ?? 1;\r\n      const usedXPBudget = monstersInCombat.reduce(\r\n        (accumulator, monster) => (accumulator += getMonsterXP(monster)),\r\n        0\r\n      );\r\n      experienceThreshold = maxExperienceThreshold - usedXPBudget * multiplier;\r\n      potentialMonsters = potentialMonsters.filter(\r\n        (monster) => getMonsterXP(monster) <= experienceThreshold / multiplier\r\n      );\r\n    }\r\n    setMonstersInCombat(monstersInCombat);\r\n  };\r\n\r\n  return {\r\n    searchQuery,\r\n    setSearchQuery,\r\n    setMonsterTypes,\r\n    setAlignments,\r\n    setSizes,\r\n    playerLevel,\r\n    setPlayerLevel,\r\n    partySize,\r\n    setPartySize,\r\n    difficulty,\r\n    setDifficulty,\r\n    experience,\r\n    setExperience,\r\n    determineMonstersInEncounter,\r\n    monstersInCombat,\r\n  };\r\n}\r\n","import React, { FC, useCallback, useState } from 'react';\r\nimport { Add } from '@mui/icons-material';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  IconButton,\r\n  Stack,\r\n} from '@mui/material';\r\nimport MonsterTable from '../monsters/monster-table';\r\nimport { GridRowParams } from '@mui/x-data-grid';\r\nimport { Monster } from '../types/Monster';\r\n\r\nconst SelectMonster: FC<{\r\n  onSelectMonster: (monster: Monster) => void;\r\n}> = ({ onSelectMonster }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const onSelect = useCallback(\r\n    (params: GridRowParams) => {\r\n      setOpen(false);\r\n      onSelectMonster(params.row);\r\n    },\r\n    [setOpen, onSelectMonster]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <IconButton color=\"success\" onClick={() => setOpen(true)}>\r\n        <Add />\r\n      </IconButton>\r\n      <Dialog\r\n        open={open}\r\n        onClose={() => setOpen(false)}\r\n        maxWidth=\"xl\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Select Monster</DialogTitle>\r\n        <DialogContent>\r\n          <Container maxWidth=\"xl\">\r\n            <MonsterTable\r\n              onRowClick={onSelect}\r\n              props={{\r\n                initialState: {\r\n                  pagination: {\r\n                    paginationModel: { pageSize: 10 },\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n            <Stack direction=\"row\" justifyContent=\"right\">\r\n              <Button onClick={() => setOpen(false)}>Cancel</Button>\r\n            </Stack>\r\n          </Container>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SelectMonster;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { Monster } from '../types/Monster';\r\nimport monsters from '../../res/srd_5e_monsters.json';\r\n\r\ntype RemainingMonster = {\r\n  uuid: string;\r\n  name: string;\r\n  maxHP: string;\r\n  hp: number | null;\r\n  ac: number;\r\n  initiative: number;\r\n};\r\n\r\nconst createRemainingMonster = (monster: Monster): RemainingMonster => {\r\n  const modifier = parseInt(monster.DEX_mod.replace(/([(+)])/g, ''));\r\n  const initiative = Math.floor(Math.random() * 20) + modifier;\r\n  return {\r\n    uuid: crypto.randomUUID(),\r\n    name: monster.name,\r\n    maxHP: monster.HP,\r\n    hp: parseInt(monster.HP),\r\n    ac: parseInt(monster.AC),\r\n    initiative,\r\n  };\r\n};\r\n\r\nconst getMonstersFromEncounter = (monsters: Monster[]): RemainingMonster[] => {\r\n  return monsters\r\n    .map((monster) => createRemainingMonster(monster))\r\n    .sort((a, b) => (a.initiative < b.initiative ? 1 : -1));\r\n};\r\n\r\nconst useTrackEncounter = (monstersInCombat: Monster[]) => {\r\n  const [remainingMonsters, setRemainingMonsters] = useState(\r\n    getMonstersFromEncounter(monstersInCombat)\r\n  );\r\n  const [selectedMonster, setSelectedMonster] =\r\n    useState<RemainingMonster | null>(remainingMonsters[0]);\r\n  const [pageNumber, setPageNumber] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const monstersInEncounter = getMonstersFromEncounter(monstersInCombat);\r\n    setRemainingMonsters(monstersInEncounter);\r\n    setSelectedMonster(monstersInEncounter[0]);\r\n  }, [monstersInCombat]);\r\n\r\n  const onUpdateHealth = useCallback(\r\n    (uuid: string, event: React.ChangeEvent<HTMLInputElement>) => {\r\n      const newRemainingMonsters = [...remainingMonsters];\r\n      const index = newRemainingMonsters.findIndex(\r\n        (monster) => monster.uuid === uuid\r\n      );\r\n      const newHealth = parseFloat(event.target.value);\r\n      newRemainingMonsters[index].hp = isNaN(newHealth) ? null : newHealth;\r\n      setRemainingMonsters(newRemainingMonsters);\r\n    },\r\n    [remainingMonsters, setRemainingMonsters]\r\n  );\r\n\r\n  const onDeleteMonster = useCallback(\r\n    (monster: RemainingMonster) => {\r\n      if (selectedMonster?.uuid === monster.uuid) {\r\n        setSelectedMonster(null);\r\n      }\r\n      const filteredRemainingMonsters = remainingMonsters.filter(\r\n        (remainingMonster) => remainingMonster.uuid !== monster.uuid\r\n      );\r\n      setRemainingMonsters(filteredRemainingMonsters);\r\n    },\r\n    [\r\n      selectedMonster,\r\n      remainingMonsters,\r\n      setSelectedMonster,\r\n      setRemainingMonsters,\r\n    ]\r\n  );\r\n\r\n  const onAddMonster = useCallback(\r\n    (monster: Monster) => {\r\n      const newRemainingMonsters = [\r\n        ...remainingMonsters,\r\n        createRemainingMonster(monster),\r\n      ];\r\n      setRemainingMonsters(newRemainingMonsters);\r\n      setSelectedMonster(newRemainingMonsters[0]);\r\n    },\r\n    [remainingMonsters, setRemainingMonsters, setSelectedMonster]\r\n  );\r\n\r\n  const identifiedMonster = monsters.find(\r\n    (monster) => selectedMonster?.name === monster.name\r\n  );\r\n\r\n  return {\r\n    remainingMonsters,\r\n    identifiedMonster,\r\n    onAddMonster,\r\n    onDeleteMonster,\r\n    setSelectedMonster,\r\n    onUpdateHealth,\r\n    pageNumber,\r\n    setPageNumber,\r\n  };\r\n};\r\n\r\nexport default useTrackEncounter;\r\n","import React, { FC, useCallback, useEffect, useState } from 'react';\r\nimport {\r\n  Stack,\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  IconButton,\r\n  TextField,\r\n  Paper,\r\n  Container,\r\n  Card,\r\n  CardContent,\r\n  InputAdornment,\r\n} from '@mui/material';\r\nimport { Shield, Favorite, Speed, Delete, Add } from '@mui/icons-material';\r\nimport { Monster } from '../types/Monster';\r\nimport MonsterCard from '../monsters/monster-card';\r\nimport SelectMonster from './select-monster';\r\nimport PageIterator from '../shared/page-iterator';\r\nimport useTrackEncounter from './useTrackEncounter';\r\n\r\nconst PAGE_SIZE = 5;\r\n\r\nconst EncounterTracker: FC<{ monstersInCombat: Monster[] }> = ({\r\n  monstersInCombat,\r\n}) => {\r\n  const {\r\n    remainingMonsters,\r\n    identifiedMonster,\r\n    onAddMonster,\r\n    onDeleteMonster,\r\n    setSelectedMonster,\r\n    onUpdateHealth,\r\n    pageNumber,\r\n    setPageNumber,\r\n  } = useTrackEncounter(monstersInCombat);\r\n  const pageOffset = pageNumber * PAGE_SIZE;\r\n\r\n  return (\r\n    <Stack direction=\"row\" justifyContent=\"space-around\">\r\n      <Box sx={{ width: '70%' }}>\r\n        {!identifiedMonster ? (\r\n          <Container>\r\n            <Paper\r\n              sx={{ m: 2, p: 3, display: 'flex', justifyContent: 'center' }}\r\n            >\r\n              <Typography variant=\"h5\">No monster selected</Typography>\r\n            </Paper>\r\n          </Container>\r\n        ) : (\r\n          <MonsterCard monster={identifiedMonster} />\r\n        )}\r\n      </Box>\r\n      <Card sx={{ m: 2, width: '30%' }}>\r\n        <CardContent>\r\n          <Stack spacing={1} direction=\"column\" alignItems=\"center\">\r\n            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\">\r\n              <Box />\r\n              <Typography variant=\"h5\">Enemies</Typography>\r\n              <SelectMonster onSelectMonster={onAddMonster} />\r\n            </Stack>\r\n            {remainingMonsters.length > 0 && (\r\n              <Typography variant=\"subtitle1\" mt={-1}>\r\n                {`(${remainingMonsters.length} monster(s) remaining)`}\r\n              </Typography>\r\n            )}\r\n            {remainingMonsters\r\n              .slice(pageOffset, pageOffset + PAGE_SIZE)\r\n              .sort((a, b) => (a.initiative > b.initiative ? 1 : -1))\r\n              .map((monster) => (\r\n                <Paper variant=\"outlined\" sx={{ p: 1 }}>\r\n                  <Stack\r\n                    spacing={0.5}\r\n                    direction=\"column\"\r\n                    alignItems=\"center\"\r\n                    justifyContent=\"center\"\r\n                  >\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      onClick={() => setSelectedMonster(monster)}\r\n                      fullWidth\r\n                    >\r\n                      <Typography>{monster.name}</Typography>\r\n                    </Button>\r\n                    <TextField\r\n                      hiddenLabel\r\n                      value={monster.hp}\r\n                      onChange={onUpdateHealth.bind(this, monster.uuid)}\r\n                      placeholder=\"HP\"\r\n                      variant=\"filled\"\r\n                      size=\"small\"\r\n                      InputProps={{\r\n                        startAdornment: (\r\n                          <InputAdornment position=\"start\" sx={{ mr: 2 }}>\r\n                            <Favorite />\r\n                          </InputAdornment>\r\n                        ),\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <Typography marginRight={2}>\r\n                              {` / ${monster.maxHP.split(' ')[0]}`}\r\n                            </Typography>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                    <Stack\r\n                      spacing={8}\r\n                      direction=\"row\"\r\n                      justifyContent=\"space-between\"\r\n                      alignItems=\"center\"\r\n                    >\r\n                      <Stack spacing={1} direction=\"row\">\r\n                        <Shield />\r\n                        <Typography marginRight={2}>{monster.ac}</Typography>\r\n                      </Stack>\r\n                      <Stack spacing={1} direction=\"row\">\r\n                        <Speed />\r\n                        <Typography marginRight={2}>\r\n                          {monster.initiative}\r\n                        </Typography>\r\n                      </Stack>\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={() => onDeleteMonster(monster)}\r\n                      >\r\n                        <Delete />\r\n                      </IconButton>\r\n                    </Stack>\r\n                  </Stack>\r\n                </Paper>\r\n              ))}\r\n            {remainingMonsters.length > 0 && (\r\n              <PageIterator\r\n                page={pageNumber}\r\n                maxLength={Math.floor(remainingMonsters.length / PAGE_SIZE)}\r\n                pageSetter={setPageNumber}\r\n              />\r\n            )}\r\n          </Stack>\r\n        </CardContent>\r\n      </Card>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default EncounterTracker;\r\n","import React from 'react';\r\nimport {\r\n  Autocomplete,\r\n  Button,\r\n  Container,\r\n  Paper,\r\n  Slider,\r\n  Stack,\r\n  TextField,\r\n  Typography,\r\n} from '@mui/material';\r\nimport {\r\n  ALIGNMENTS,\r\n  DIFFICULTIES,\r\n  MAX_EXPERIENCE,\r\n  MIN_EXPERIENCE,\r\n  MONSTER_TYPES,\r\n  SIZES,\r\n} from '../constants';\r\nimport useGenerateEncounter from './useGenerateEncounter';\r\nimport EncounterTracker from './encounter-tracker';\r\n\r\nexport default function EncounterGenerator() {\r\n  const {\r\n    searchQuery,\r\n    setSearchQuery,\r\n    setMonsterTypes,\r\n    setAlignments,\r\n    setSizes,\r\n    playerLevel,\r\n    setPlayerLevel,\r\n    partySize,\r\n    setPartySize,\r\n    difficulty,\r\n    setDifficulty,\r\n    experience,\r\n    setExperience,\r\n    determineMonstersInEncounter,\r\n    monstersInCombat,\r\n  } = useGenerateEncounter();\r\n\r\n  return (\r\n    <Container>\r\n      <Paper sx={{ m: 3, p: 2 }}>\r\n        <Stack\r\n          spacing={2}\r\n          direction=\"column\"\r\n          justifyContent=\"space-between\"\r\n          alignItems=\"center\"\r\n        >\r\n          <TextField\r\n            variant=\"filled\"\r\n            fullWidth\r\n            value={searchQuery}\r\n            onChange={(event) => setSearchQuery(event.target.value)}\r\n            label=\"Keywords\"\r\n            size=\"small\"\r\n          />\r\n          <Stack\r\n            spacing={1}\r\n            direction=\"row\"\r\n            width=\"100%\"\r\n            flexWrap=\"wrap\"\r\n            useFlexGap\r\n          >\r\n            <Autocomplete\r\n              multiple\r\n              options={MONSTER_TYPES}\r\n              onChange={(_event, newValue) => setMonsterTypes(newValue)}\r\n              sx={{ flexGrow: 1 }}\r\n              renderInput={(params) => (\r\n                <TextField {...params} label=\"Monster Type\" />\r\n              )}\r\n            />\r\n            <Autocomplete\r\n              multiple\r\n              options={ALIGNMENTS}\r\n              onChange={(_event, newValue) => setAlignments(newValue)}\r\n              sx={{ flexGrow: 1 }}\r\n              renderInput={(params) => (\r\n                <TextField {...params} label=\"Alignment\" />\r\n              )}\r\n            />\r\n            <Autocomplete\r\n              multiple\r\n              options={SIZES}\r\n              onChange={(_event, newValue) => setSizes(newValue)}\r\n              sx={{ flexGrow: 1 }}\r\n              renderInput={(params) => <TextField {...params} label=\"Size\" />}\r\n            />\r\n          </Stack>\r\n          <Stack\r\n            spacing={1}\r\n            direction=\"row\"\r\n            width=\"100%\"\r\n            flexWrap=\"wrap\"\r\n            useFlexGap\r\n          >\r\n            <Autocomplete\r\n              options={[\r\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\r\n                19, 20,\r\n              ]}\r\n              value={playerLevel}\r\n              onChange={(_event, newValue) => setPlayerLevel(newValue ?? 1)}\r\n              sx={{ flexGrow: 1 }}\r\n              renderInput={(params) => (\r\n                <TextField {...params} label=\"Max Player Level\" />\r\n              )}\r\n              getOptionLabel={(option) => `${option}`}\r\n            />\r\n            <Autocomplete\r\n              options={[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\r\n              value={partySize}\r\n              onChange={(_event, newValue) => setPartySize(newValue ?? 1)}\r\n              sx={{ flexGrow: 1 }}\r\n              renderInput={(params) => (\r\n                <TextField {...params} label=\"Party Size\" />\r\n              )}\r\n              getOptionLabel={(option) => `${option}`}\r\n            />\r\n            <Autocomplete\r\n              options={DIFFICULTIES}\r\n              value={difficulty}\r\n              onChange={(_event, newValue) => setDifficulty(newValue ?? 'Easy')}\r\n              sx={{ flexGrow: 1 }}\r\n              renderInput={(params) => (\r\n                <TextField {...params} label=\"Difficulty\" />\r\n              )}\r\n            />\r\n          </Stack>\r\n          <Stack\r\n            spacing={2}\r\n            direction=\"row\"\r\n            justifyContent=\"space-around\"\r\n            alignItems=\"center\"\r\n          >\r\n            <TextField\r\n              size=\"small\"\r\n              label=\"Max\"\r\n              value={experience[0]}\r\n              onChange={(event) =>\r\n                setExperience([parseInt(event.target.value), experience[1]])\r\n              }\r\n            />\r\n            <Stack direction=\"column\" flexGrow={2}>\r\n              <Typography variant=\"subtitle2\">Experience Range</Typography>\r\n              <Slider\r\n                value={experience}\r\n                onChange={(_e, newValue) => setExperience(newValue as number[])}\r\n                valueLabelDisplay=\"auto\"\r\n                min={MIN_EXPERIENCE}\r\n                max={MAX_EXPERIENCE}\r\n              />\r\n            </Stack>\r\n            <TextField\r\n              size=\"small\"\r\n              label=\"Max\"\r\n              value={experience[1]}\r\n              onChange={(event) =>\r\n                setExperience([experience[0], parseInt(event.target.value)])\r\n              }\r\n            />\r\n          </Stack>\r\n          <Button variant=\"contained\" onClick={determineMonstersInEncounter}>\r\n            Generate Encounter\r\n          </Button>\r\n        </Stack>\r\n      </Paper>\r\n      <EncounterTracker monstersInCombat={monstersInCombat} />\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { styled, Accordion, AccordionProps } from '@mui/material';\r\n\r\nexport const CustomAccordion = styled((props: AccordionProps) => (\r\n  <Accordion disableGutters elevation={0} square {...props} />\r\n))(() => ({\r\n  boxShadow: 'none', // this styles directly apply to accordion\r\n  border: `0px`,\r\n  '.MuiAccordionDetails-root': {},\r\n  '.MuiAccordionSummary-root': {}, // this apply to Summary\r\n}));\r\n","import React, { FC } from 'react';\r\nimport {\r\n  Paper,\r\n  Stack,\r\n  Typography,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n} from '@mui/material';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport { ArrowDropDown } from '@mui/icons-material';\r\nimport { CustomAccordion } from '../shared/custom-styles';\r\n\r\nconst renderTable: FC<{ [key: string]: string[] }> = (tableObject) => {\r\n  const objectEntries = Object.entries(tableObject);\r\n  const values = Object.values(tableObject)[0].map((_value, index) => {\r\n    const valueObject: { [key: string]: string } = { id: `${index}` };\r\n    objectEntries.forEach(([key, array]) => {\r\n      valueObject[key] = array[index];\r\n    });\r\n    return valueObject;\r\n  });\r\n  const columnDescriptor = Object.keys(tableObject).map((title) => ({\r\n    field: title,\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  }));\r\n  return (\r\n    <Paper>\r\n      <DataGrid rows={values} columns={columnDescriptor} hideFooter />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst RenderJsonRecursive: FC<{\r\n  instance: object | string | object[] | string[];\r\n  depth?: number;\r\n}> = ({ instance, depth = 0 }) => {\r\n  if (typeof instance === 'string') {\r\n    return (\r\n      <td\r\n        dangerouslySetInnerHTML={{\r\n          __html: instance,\r\n        }}\r\n      />\r\n    );\r\n  } else if (Array.isArray(instance)) {\r\n    return (\r\n      <Stack direction=\"column\">\r\n        {(instance ?? []).map((subInstance) =>\r\n          RenderJsonRecursive({ instance: subInstance, depth: depth + 1 })\r\n        )}\r\n      </Stack>\r\n    );\r\n  } else if (typeof instance === 'object') {\r\n    return (\r\n      <Stack direction=\"column\" m={1} p={1}>\r\n        {Object.entries(instance).map(([title, value]) => {\r\n          switch (title) {\r\n            case 'table':\r\n              return renderTable(value);\r\n            case 'content':\r\n              return (\r\n                <Stack direction=\"column\" mb={2}>\r\n                  {RenderJsonRecursive({ instance: value, depth: depth + 1 })}\r\n                </Stack>\r\n              );\r\n            default:\r\n              return (\r\n                <CustomAccordion defaultExpanded={depth > 1}>\r\n                  <AccordionSummary\r\n                    expandIcon={<ArrowDropDown />}\r\n                    aria-controls=\"panel1-content\"\r\n                    id=\"panel1-header\"\r\n                  >\r\n                    <Typography variant=\"h5\" p={1}>\r\n                      {title}\r\n                    </Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <Stack direction=\"column\" marginLeft={1}>\r\n                      {RenderJsonRecursive({\r\n                        instance: value,\r\n                        depth: depth + 1,\r\n                      })}\r\n                    </Stack>\r\n                  </AccordionDetails>\r\n                </CustomAccordion>\r\n              );\r\n          }\r\n        })}\r\n      </Stack>\r\n    );\r\n  } else {\r\n    return <Typography>{`Unsupported type: ${typeof instance}`}</Typography>;\r\n  }\r\n};\r\n\r\nexport default RenderJsonRecursive;\r\n","import React from 'react';\r\nimport { Box, Paper, Stack, Typography } from '@mui/material';\r\nimport mechanics from '../../res/rules/06 mechanics.json';\r\nimport RenderJsonRecursive from '../shared/render-json-recursive';\r\n\r\nexport default function Mechanics() {\r\n  return (\r\n    <Stack direction=\"column\" margin=\"3%\">\r\n      {Object.entries(mechanics).map(([title, value]) => (\r\n        <Box>\r\n          <Typography variant=\"h4\">{title}</Typography>\r\n          <Paper sx={{ p: 2, m: 2 }}>{RenderJsonRecursive({ instance: value })}</Paper>\r\n        </Box>\r\n      ))}\r\n    </Stack>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport { Container, Paper, TextField } from '@mui/material';\r\nimport spells from '../../res/srd_5e_spells.json';\r\nimport { DataGrid, GridValueGetterParams } from '@mui/x-data-grid';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Spell } from '../types/Spell';\r\n\r\nconst columnDescriptor = [\r\n  {\r\n    field: 'name',\r\n    headerName: 'Name',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'level',\r\n    headerName: 'Level',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'school',\r\n    headerName: 'School',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'range',\r\n    headerName: 'Range',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'casting_time',\r\n    headerName: 'Casting Time',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'duration',\r\n    headerName: 'Duration',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'components',\r\n    headerName: 'Components',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n    valueGetter: (params: GridValueGetterParams<Spell>) =>\r\n      params.row.components.raw,\r\n  },\r\n  {\r\n    field: 'classes',\r\n    headerName: 'Classes',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n    valueGetter: (params: GridValueGetterParams<Spell>) =>\r\n      params.row.classes.join(', '),\r\n  },\r\n];\r\n\r\nexport default function MonsterTable() {\r\n  const navigate = useNavigate();\r\n  const [searchQuery, setSearchQuery] = React.useState<string>('');\r\n\r\n  return (\r\n    <Container>\r\n      <TextField\r\n        variant=\"filled\"\r\n        fullWidth\r\n        sx={{ marginBottom: 2 }}\r\n        value={searchQuery}\r\n        onChange={(event) => setSearchQuery(event.target.value)}\r\n        label=\"Search Spells\"\r\n        size=\"small\"\r\n      />\r\n      <Paper sx={{ m: 3 }}>\r\n        <DataGrid\r\n          rows={spells.filter((spell) =>\r\n            searchQuery\r\n              .split('+')\r\n              .some((query) =>\r\n                spell.name.toLowerCase().includes(query.toLowerCase())\r\n              )\r\n          )}\r\n          columns={columnDescriptor}\r\n          onRowClick={(params) => navigate(`/spells/${params.row.name}`)}\r\n          initialState={{\r\n            pagination: {\r\n              paginationModel: { pageSize: 25 },\r\n            },\r\n          }}\r\n          pageSizeOptions={[10, 25, 50]}\r\n          getRowId={(row) => row.name}\r\n          sx={{ width: '100%' }}\r\n        />\r\n      </Paper>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { FC } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Container,\r\n  Divider,\r\n  Stack,\r\n  Typography,\r\n} from '@mui/material';\r\nimport { Spell } from '../types/Spell';\r\n\r\nconst SpellCard: FC<{ spell: Spell }> = ({ spell }) => {\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Stack direction=\"column\">\r\n          <Typography variant=\"h4\">{spell.name}</Typography>\r\n          <Typography variant=\"subtitle1\">{spell.type}</Typography>\r\n          <Divider\r\n            orientation=\"horizontal\"\r\n            sx={{ marginTop: 1, marginBottom: 2 }}\r\n          />\r\n          <Container sx={{ marginBottom: 2 }}>\r\n            <Stack\r\n              direction=\"column\"\r\n              justifyContent=\"center\"\r\n              alignItems=\"left\"\r\n              width=\"45%\"\r\n              height=\"100%\"\r\n            >\r\n              <Typography variant=\"subtitle1\">{`Casting Time: ${spell.casting_time}`}</Typography>\r\n              <Typography variant=\"subtitle1\">{`Casting Duration: ${spell.duration}`}</Typography>\r\n              <Typography variant=\"subtitle1\">{`Range: ${spell.range}`}</Typography>\r\n              <Typography variant=\"subtitle1\">{`Components: ${spell.components.raw}`}</Typography>\r\n              <Typography variant=\"subtitle1\">{`Classes: ${spell.classes.join(', ')}`}</Typography>\r\n            </Stack>\r\n          </Container>\r\n          <Container>\r\n            <Divider orientation=\"horizontal\" sx={{ margin: 1 }} />\r\n            <Typography variant=\"h5\">Description</Typography>\r\n            <Typography variant=\"subtitle1\">{spell.description}</Typography>\r\n          </Container>\r\n        </Stack>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default SpellCard;\r\n","import React from 'react';\r\nimport { Container, Typography } from '@mui/material';\r\nimport spells from '../../res/srd_5e_spells.json';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport SpellCard from './spell-card';\r\nimport PageIterator from '../shared/page-iterator';\r\n\r\nexport default function SpellView() {\r\n  const navigate = useNavigate();\r\n  const { name } = useParams();\r\n  const spellIndex = spells.findIndex((spell) => spell.name === name);\r\n  const selectedSpell = spells[spellIndex];\r\n\r\n  return selectedSpell === undefined ? (\r\n    <Typography variant=\"h5\">\r\n      {`Cannot find spell with name \"${name}\"`}\r\n    </Typography>\r\n  ) : (\r\n    <Container sx={{ justifyContent: 'center', alignContent: 'center' }}>\r\n      <PageIterator page={spellIndex} maxLength={spells.length} pageSetter={(newPage) => navigate(`/spells/${spells[newPage].name}`)} />\r\n      <SpellCard spell={selectedSpell} />\r\n    </Container>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport {\r\n  AccordionDetails,\r\n  AccordionSummary,\r\n  Container,\r\n  Paper,\r\n  Stack,\r\n  TextField,\r\n  Typography,\r\n} from '@mui/material';\r\nimport armours from '../../res/srd_5e_armour.json';\r\nimport weapons from '../../res/srd_5e_weapons.json';\r\nimport gears from '../../res/srd_5e_gear.json';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { CustomAccordion } from '../shared/custom-styles';\r\nimport { ArrowDropDown } from '@mui/icons-material';\r\n\r\nconst armourColumnDescriptor = [\r\n  {\r\n    field: 'name',\r\n    headerName: 'Name',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'AC',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'cost',\r\n    headerName: 'Cost',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'weight',\r\n    headerName: 'Weight',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'strength',\r\n    headerName: 'Strength Req.',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'stealth',\r\n    headerName: 'Stealth Req.',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'type',\r\n    headerName: 'Type',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n];\r\n\r\nconst weaponColumnDescriptor = [\r\n  {\r\n    field: 'name',\r\n    headerName: 'Name',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'damage',\r\n    headerName: 'Damage',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'cost',\r\n    headerName: 'Cost',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'weight',\r\n    headerName: 'Weight',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'properties',\r\n    headerName: 'Properties',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'type',\r\n    headerName: 'Type',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n];\r\n\r\nconst gearColumnDescriptor = [\r\n  {\r\n    field: 'name',\r\n    headerName: 'Name',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'cost',\r\n    headerName: 'Cost',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'weight',\r\n    headerName: 'Weight',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n  {\r\n    field: 'type',\r\n    headerName: 'Type',\r\n    flex: 1,\r\n    sortable: true,\r\n    filterable: true,\r\n  },\r\n];\r\n\r\nexport default function MonsterTable() {\r\n  const navigate = useNavigate();\r\n  const [searchQuery, setSearchQuery] = React.useState<string>('');\r\n\r\n  const sections = [\r\n    { title: 'Armour', rows: armours, columns: armourColumnDescriptor },\r\n    { title: 'Weapons', rows: weapons, columns: weaponColumnDescriptor },\r\n    { title: 'Gear', rows: gears, columns: gearColumnDescriptor },\r\n  ];\r\n\r\n  return (\r\n    <Container>\r\n      <TextField\r\n        variant=\"filled\"\r\n        fullWidth\r\n        sx={{ marginBottom: 2 }}\r\n        value={searchQuery}\r\n        onChange={(event) => setSearchQuery(event.target.value)}\r\n        label=\"Search Armaments\"\r\n        size=\"small\"\r\n      />\r\n      <Paper sx={{ p: 3 }}>\r\n        {sections.map(({ title, rows, columns }) => (\r\n          <CustomAccordion>\r\n            <AccordionSummary\r\n              expandIcon={<ArrowDropDown />}\r\n              aria-controls=\"panel1-content\"\r\n              id=\"panel1-header\"\r\n            >\r\n              <Typography variant=\"h5\" margin={1}>\r\n                {title}\r\n              </Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n              <Paper sx={{ m: 2 }}>\r\n                <DataGrid\r\n                  rows={rows.filter((armament) =>\r\n                    searchQuery\r\n                      .split('+')\r\n                      .some((query) =>\r\n                        armament.name\r\n                          .toLowerCase()\r\n                          .includes(query.toLowerCase())\r\n                      )\r\n                  )}\r\n                  columns={columns}\r\n                  initialState={{\r\n                    pagination: {\r\n                      paginationModel: { pageSize: 10 },\r\n                    },\r\n                  }}\r\n                  pageSizeOptions={[10, 25, 50]}\r\n                  getRowId={(row) => row.name}\r\n                  sx={{ width: '100%' }}\r\n                />\r\n              </Paper>\r\n            </AccordionDetails>\r\n          </CustomAccordion>\r\n        ))}\r\n      </Paper>\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport MapOfAvandria from '../../res/Avandria.png';\r\nimport { Box } from '@mui/material';\r\n\r\nconst AvandriaMap = () => {\r\n  return (\r\n    <Box>\r\n      <img src={MapOfAvandria} alt=\"Map Of Avandria\" height=\"100%\" />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AvandriaMap;\r\n","import React from 'react';\r\nimport { RouterProvider, createHashRouter } from 'react-router-dom';\r\nimport MonsterTable from './monsters/monster-table';\r\nimport Header from './header';\r\nimport MonsterView from './monsters/monster-view';\r\nimport EncounterGenerate from './encounters/encounter-generator';\r\nimport Mechanics from './mechanics/mechanics';\r\nimport SpellTable from './spells/spell-table';\r\nimport SpellView from './spells/spell-view';\r\nimport Shop from './shop/shop';\r\nimport AvandriaMap from './campaigns/avandria-map';\r\n\r\nconst AppRouter = () => {\r\n  const router = createHashRouter([\r\n    {\r\n      path: '/*',\r\n      element: <Header />,\r\n      children: [\r\n        {\r\n          path: '',\r\n          element: <Mechanics />,\r\n        },\r\n        {\r\n          path: 'monsters',\r\n          element: <MonsterTable />,\r\n        },\r\n        {\r\n          path: 'monsters/:name',\r\n          element: <MonsterView />,\r\n        },\r\n        {\r\n          path: 'encounter',\r\n          element: <EncounterGenerate />,\r\n        },\r\n        {\r\n          path: 'spells',\r\n          element: <SpellTable />,\r\n        },\r\n        {\r\n          path: 'spells/:name',\r\n          element: <SpellView />,\r\n        },\r\n        {\r\n          path: 'gear',\r\n          element: <Shop />,\r\n        },\r\n        {\r\n          path: 'campaign',\r\n          element: <AvandriaMap />,\r\n        },\r\n      ],\r\n    },\r\n  ]);\r\n\r\n  return <RouterProvider router={router} />;\r\n};\r\n\r\nexport default AppRouter;\r\n","/**\r\n * Main application for executing the website\r\n * @author Lachlan Charteris\r\n */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport { Box, CssBaseline, ThemeProvider } from '@mui/material';\r\nimport theme from './theme';\r\nimport AppRouter from './ts/app-router';\r\n\r\nconst rootElement = document.getElementById('root');\r\nconst root = ReactDOM.createRoot(rootElement!);\r\n\r\nroot.render(\r\n  <ThemeProvider theme={theme}>\r\n    <React.StrictMode>\r\n      <Box>\r\n        <CssBaseline />\r\n        <AppRouter />\r\n      </Box>\r\n    </React.StrictMode>\r\n  </ThemeProvider>\r\n);\r\n"],"sourceRoot":""}